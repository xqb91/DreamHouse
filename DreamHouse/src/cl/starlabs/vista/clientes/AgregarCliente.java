/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cl.starlabs.vista.clientes;

import javax.swing.UIManager;
import cl.starlabs.modelo.Ciudad;
import cl.starlabs.controladores.CiudadJpaController;
import cl.starlabs.controladores.ClienteJpaController;
import cl.starlabs.modelo.Tipopropiedades;
import cl.starlabs.controladores.TipopropiedadesJpaController;
import cl.starlabs.modelo.Cliente;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;

/**
 *
 * @author Victor
 */
public class AgregarCliente extends javax.swing.JFrame {

    /**
     * Creates new form Agregar
     */
    Cliente clienteForaneo = null;
    
    public AgregarCliente() {
        initComponents();
        //centrar aplicacion
        this.setLocationRelativeTo(null);
        
        //rellenado valores
        cmbComuna.addItem("Seleccione...");
        cmbPreferencia.addItem("Seleccione...");
        
        //rellenando comunas
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("PU");
        //rellenando lista de ciudades
        for(Ciudad c : new CiudadJpaController(emf).listar()) {
            cmbComuna.addItem(c.getNombre());
        }
        //rellenando lista de tipos de propiedad
        for(Tipopropiedades t : new TipopropiedadesJpaController(emf).listar()) {
            cmbPreferencia.addItem(t.getNombre());
        }
        
        emf.close();
    }
    
    public AgregarCliente(Cliente cc) {
        initComponents();
        //centrar aplicacion
        this.clienteForaneo = cc;
        this.setLocationRelativeTo(null);
        this.setTitle("StarLabs DreamHome :: Editar Cliente "+cc.nombreCompleto());
        //rellenado valores
        txtRut.setText(cc.getRut()+"");
        txtDv.setText(cc.getDv()+"");
        txtNombres.setText(cc.getNombre());
        txtApaterno.setText(cc.getApaterno());
        txtAmaterno.setText(cc.getAmaterno());
        txtDireccion.setText(cc.getDireccion());
        cmbComuna.addItem(cc.getCiudad().getNombre());
        txtTelefono.setText(cc.getTelefono());
        txtEmail.setText(cc.getEmail());
        txtRenta.setText(((int)cc.getMaxrent())+"");
        btnGuardar.setText("Guardar Cambios");
        btnGuardarNuevo.setText("Eliminar Cliente");
        btnCancelar.setText("No guardar");
        
        //rellenando comunas
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("PU");
        //rellenando lista de ciudades
        for(Ciudad c : new CiudadJpaController(emf).listar()) {
            cmbComuna.addItem(c.getNombre());
        }
        //rellenando lista de tipos de propiedad
        for(Tipopropiedades t : new TipopropiedadesJpaController(emf).listar()) {
            if(t.getId().equals(new BigDecimal(cc.getTipopref()))) {
                cmbPreferencia.addItem(t.getNombre());
                break;
            }
        }
        
        for(Tipopropiedades t : new TipopropiedadesJpaController(emf).listar()) {
            cmbPreferencia.addItem(t.getNombre());
        }
        
        emf.close();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelInfoCliente = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtRut = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtDv = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtNombres = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtApaterno = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtAmaterno = new javax.swing.JTextField();
        panelDomicilioCliente = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cmbComuna = new javax.swing.JComboBox();
        panelInfoContacto = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        panelInfoAdicional = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        cmbPreferencia = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        txtRenta = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        btnGuardarNuevo = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("StarLabs DreamHome :: Agregar Cliente");
        setName("frmAgregarCliente"); // NOI18N
        setResizable(false);

        panelInfoCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("Información del Cliente"));

        jLabel1.setText("Rut Cliente");

        jLabel2.setText("-");

        jLabel3.setText("Nombres");

        jLabel4.setText("Ap. Paterno");

        jLabel5.setText("Ap. Materno");

        javax.swing.GroupLayout panelInfoClienteLayout = new javax.swing.GroupLayout(panelInfoCliente);
        panelInfoCliente.setLayout(panelInfoClienteLayout);
        panelInfoClienteLayout.setHorizontalGroup(
            panelInfoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoClienteLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(panelInfoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(panelInfoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtAmaterno)
                    .addComponent(txtNombres)
                    .addGroup(panelInfoClienteLayout.createSequentialGroup()
                        .addComponent(txtRut, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDv, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 120, Short.MAX_VALUE))
                    .addComponent(txtApaterno))
                .addContainerGap())
        );
        panelInfoClienteLayout.setVerticalGroup(
            panelInfoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInfoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtRut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtDv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInfoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInfoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtApaterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInfoClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtAmaterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelDomicilioCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("Domicilio de Cliente"));

        jLabel6.setText("Dirección");

        jLabel7.setText("Comuna");

        javax.swing.GroupLayout panelDomicilioClienteLayout = new javax.swing.GroupLayout(panelDomicilioCliente);
        panelDomicilioCliente.setLayout(panelDomicilioClienteLayout);
        panelDomicilioClienteLayout.setHorizontalGroup(
            panelDomicilioClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDomicilioClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDomicilioClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(panelDomicilioClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDireccion)
                    .addComponent(cmbComuna, 0, 277, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelDomicilioClienteLayout.setVerticalGroup(
            panelDomicilioClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDomicilioClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDomicilioClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDomicilioClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cmbComuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelInfoContacto.setBorder(javax.swing.BorderFactory.createTitledBorder("Información de Contacto"));

        jLabel8.setText("Email");

        jLabel9.setText("Telefóno");

        javax.swing.GroupLayout panelInfoContactoLayout = new javax.swing.GroupLayout(panelInfoContacto);
        panelInfoContacto.setLayout(panelInfoContactoLayout);
        panelInfoContactoLayout.setHorizontalGroup(
            panelInfoContactoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoContactoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInfoContactoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelInfoContactoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtTelefono)
                    .addComponent(txtEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelInfoContactoLayout.setVerticalGroup(
            panelInfoContactoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoContactoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInfoContactoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInfoContactoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelInfoAdicional.setBorder(javax.swing.BorderFactory.createTitledBorder("Información Adicional"));

        jLabel10.setText("Preferencia de Propiedades");

        jLabel11.setText("Monto de Renta del Cliente ($ CLP)");

        jLabel12.setText("$");

        javax.swing.GroupLayout panelInfoAdicionalLayout = new javax.swing.GroupLayout(panelInfoAdicional);
        panelInfoAdicional.setLayout(panelInfoAdicionalLayout);
        panelInfoAdicionalLayout.setHorizontalGroup(
            panelInfoAdicionalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoAdicionalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInfoAdicionalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbPreferencia, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelInfoAdicionalLayout.createSequentialGroup()
                        .addGroup(panelInfoAdicionalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addGroup(panelInfoAdicionalLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtRenta, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 69, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelInfoAdicionalLayout.setVerticalGroup(
            panelInfoAdicionalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoAdicionalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbPreferencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInfoAdicionalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnGuardar.setText("Guardar y Cerrar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnGuardarNuevo.setText("Guardar y registra nuevo");
        btnGuardarNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarNuevoActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelInfoCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelDomicilioCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelInfoContacto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelInfoAdicional, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGuardarNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelInfoAdicional, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelInfoCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelDomicilioCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelInfoContacto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btnGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGuardarNuevo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        txtRut.setText("");
        txtDv.setText("");
        txtNombres.setText("");
        txtAmaterno.setText("");
        txtApaterno.setText("");
        txtDireccion.setText("");
        txtEmail.setText("");
        txtTelefono.setText("");
        txtRenta.setText("");
        cmbComuna.removeAllItems();
        cmbComuna.addItem("Seleccione...");
        cmbPreferencia.removeAllItems();
        cmbPreferencia.addItem("Seleccione...");
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        if(txtRut.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "El rut esta vacío");
            txtRut.requestFocus();
        }else{
            if(txtDv.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(null, "El digito verificador del rut esta vacío");
                txtDv.requestFocus();
            }else{
                if(txtNombres.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Indique el nombre del cliente");
                    txtNombres.requestFocus();
                }else{
                    if(txtApaterno.getText().isEmpty()) {
                        JOptionPane.showMessageDialog(null, "El apellido paterno del cliente no ha sido especificado");
                        txtApaterno.requestFocus();
                    }else{
                        if(txtAmaterno.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "El apellido materno del cliente no ha sido especificado");
                            txtAmaterno.requestFocus();
                        }else{
                            if(txtDireccion.getText().isEmpty()) {
                                JOptionPane.showMessageDialog(null, "Especifique la dirección del cliente");
                                txtDireccion.requestFocus();
                            }else{
                                if(cmbComuna.getSelectedItem().toString().compareToIgnoreCase("Seleccione...") == 0) {
                                    JOptionPane.showMessageDialog(null, "Seleccione la comuna donde vive el cliente");
                                    cmbComuna.requestFocus();
                                }else{
                                    if(txtEmail.getText().isEmpty()) {
                                        JOptionPane.showMessageDialog(null, "Indique la dirección de correo electrónico del cliente");
                                        txtEmail.requestFocus();
                                    }else{
                                        if(txtTelefono.getText().isEmpty()) {
                                            JOptionPane.showMessageDialog(null, "Indique el número telefónico del cliente");
                                            txtTelefono.requestFocus();
                                        }else{
                                            if(cmbPreferencia.getSelectedItem().toString().compareToIgnoreCase("Seleccione...") == 0) {
                                                JOptionPane.showMessageDialog(null, "Seleccione el tipo de vivienda que el cliente busca");
                                                cmbPreferencia.requestFocus();
                                            }else{
                                                if(txtRenta.getText().isEmpty()) {
                                                    JOptionPane.showMessageDialog(null, "Indique la renta del cliente en pesos sin puntos");
                                                    txtRenta.requestFocus();
                                                }else{
                                                    int rut, tel, renta;
                                                    String nombres, telefono, apaterno, amaterno, direccion, email, comuna, tipoPropiedad;
                                                    char dv;
                                                    //verificar campos numéricos
                                                    try {
                                                        rut = Integer.parseInt(txtRut.getText());
                                                        try {
                                                            tel = Integer.parseInt(txtTelefono.getText());
                                                            try {
                                                                renta = Integer.parseInt(txtRenta.getText());
                                                                
                                                                //todo OK
                                                                dv = txtDv.getText().charAt(0);
                                                                nombres = txtNombres.getText();
                                                                apaterno = txtApaterno.getText();
                                                                telefono = tel+"";
                                                                amaterno = txtAmaterno.getText();
                                                                direccion = txtDireccion.getText();
                                                                email = txtEmail.getText();
                                                                comuna = cmbComuna.getSelectedItem().toString();
                                                                tipoPropiedad = cmbPreferencia.getSelectedItem().toString();
                                                                
                                                                // -- SE VERIFICA SI ES MODIFICACION O CREACION DE CLIENTE -- //
                                                                if(clienteForaneo == null)
                                                                {   //creacion de cliente
                                                                    try {
                                                                        EntityManagerFactory emf = Persistence.createEntityManagerFactory("PU");
                                                                        Ciudad ciud = new CiudadJpaController(emf).buscarPorNombre(comuna);
                                                                        Tipopropiedades tipro = new TipopropiedadesJpaController(emf).buscarPorNombre(tipoPropiedad);
                                                                        BigInteger bgi = new BigInteger(tipro.getId()+"");
                                                                        BigDecimal bgd = new ClienteJpaController(emf).ultimoCliente();
                                                                        Cliente cli = new Cliente(bgd, rut, dv, nombres, apaterno, amaterno, direccion, ciud, email, telefono, bgi, renta);
                                                                        new ClienteJpaController(emf).create(cli);
                                                                        this.dispose();
                                                                        emf.close();                                                                                                                                    
                                                                    } catch (Exception e) {
                                                                        JOptionPane.showMessageDialog(null, e.getMessage(), "error", 3);
                                                                    }
                                                                }else{
                                                                    //Modificación de cliente
                                                                    clienteForaneo.setRut(rut);
                                                                    clienteForaneo.setDv(dv);
                                                                    clienteForaneo.setNombre(nombres);
                                                                    clienteForaneo.setApaterno(apaterno);
                                                                    clienteForaneo.setAmaterno(amaterno);
                                                                    clienteForaneo.setDireccion(direccion);
                                                                    
                                                                    EntityManagerFactory emf = Persistence.createEntityManagerFactory("PU");
                                                                    Ciudad ciud = new CiudadJpaController(emf).buscarPorNombre(comuna);
                                                                    Tipopropiedades tipro = new TipopropiedadesJpaController(emf).buscarPorNombre(tipoPropiedad);
                                                                    BigInteger bgi = new BigInteger(tipro.getId()+"");
                                                                    
                                                                    clienteForaneo.setCiudad(ciud);
                                                                    clienteForaneo.setEmail(email);
                                                                    clienteForaneo.setTelefono(telefono);
                                                                    clienteForaneo.setTipopref(bgi);
                                                                    clienteForaneo.setMaxrent(renta);
                                                                    try {
                                                                        new ClienteJpaController(emf).edit(clienteForaneo);
                                                                        JOptionPane.showMessageDialog(null, "El cliente "+clienteForaneo.nombreCompleto()+" ha sido actualizado");
                                                                        this.dispose();
                                                                        new ListarClientes().setVisible(true);
                                                                    }catch(Exception e)
                                                                    {
                                                                       JOptionPane.showMessageDialog(null, "Ocurrió un error, el servidor dijo: "+e.getMessage());
                                                                    }
                                                                }
                                                            }catch(Exception e)
                                                            {
                                                                JOptionPane.showMessageDialog(null, "El valor de la renta solo puede contener numeros sin puntos");
                                                                txtRenta.requestFocus();
                                                                txtRenta.setText("");
                                                            }
                                                        }catch(Exception e )
                                                        {
                                                            JOptionPane.showMessageDialog(null, "El telefono solo puede contener numeros");
                                                            txtTelefono.requestFocus();
                                                            txtTelefono.setText("");
                                                        }
                                                    }catch(Exception e)
                                                    {
                                                        JOptionPane.showMessageDialog(null, "El rut solo puede contener números");
                                                        txtRut.requestFocus();
                                                        txtRut.setText("");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnGuardarNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarNuevoActionPerformed
        if(txtRut.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "El rut esta vacío");
            txtRut.requestFocus();
        }else{
            if(txtDv.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(null, "El digito verificador del rut esta vacío");
                txtDv.requestFocus();
            }else{
                if(txtNombres.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Indique el nombre del cliente");
                    txtNombres.requestFocus();
                }else{
                    if(txtApaterno.getText().isEmpty()) {
                        JOptionPane.showMessageDialog(null, "El apellido paterno del cliente no ha sido especificado");
                        txtApaterno.requestFocus();
                    }else{
                        if(txtAmaterno.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "El apellido materno del cliente no ha sido especificado");
                            txtAmaterno.requestFocus();
                        }else{
                            if(txtDireccion.getText().isEmpty()) {
                                JOptionPane.showMessageDialog(null, "Especifique la dirección del cliente");
                                txtDireccion.requestFocus();
                            }else{
                                if(cmbComuna.getSelectedItem().toString().compareToIgnoreCase("Seleccione...") == 0) {
                                    JOptionPane.showMessageDialog(null, "Seleccione la comuna donde vive el cliente");
                                    cmbComuna.requestFocus();
                                }else{
                                    if(txtEmail.getText().isEmpty()) {
                                        JOptionPane.showMessageDialog(null, "Indique la dirección de correo electrónico del cliente");
                                        txtEmail.requestFocus();
                                    }else{
                                        if(txtTelefono.getText().isEmpty()) {
                                            JOptionPane.showMessageDialog(null, "Indique el número telefónico del cliente");
                                            txtTelefono.requestFocus();
                                        }else{
                                            if(cmbPreferencia.getSelectedItem().toString().compareToIgnoreCase("Seleccione...") == 0) {
                                                JOptionPane.showMessageDialog(null, "Seleccione el tipo de vivienda que el cliente busca");
                                                cmbPreferencia.requestFocus();
                                            }else{
                                                if(txtRenta.getText().isEmpty()) {
                                                    JOptionPane.showMessageDialog(null, "Indique la renta del cliente en pesos sin puntos");
                                                    txtRenta.requestFocus();
                                                }else{
                                                    int rut, tel, renta;
                                                    String nombres, telefono, apaterno, amaterno, direccion, email, comuna, tipoPropiedad;
                                                    char dv;
                                                    //verificar campos numéricos
                                                    try {
                                                        rut = Integer.parseInt(txtRut.getText());
                                                        try {
                                                            tel = Integer.parseInt(txtTelefono.getText());
                                                            try {
                                                                renta = Integer.parseInt(txtRenta.getText());
                                                                
                                                                //todo OK
                                                                dv = txtDv.getText().charAt(0);
                                                                nombres = txtNombres.getText();
                                                                apaterno = txtApaterno.getText();
                                                                telefono = tel+"";
                                                                amaterno = txtAmaterno.getText();
                                                                direccion = txtDireccion.getText();
                                                                email = txtEmail.getText();
                                                                comuna = cmbComuna.getSelectedItem().toString();
                                                                tipoPropiedad = cmbPreferencia.getSelectedItem().toString();
                                                                //VERIFICANDO SI ES MODIFICACION O ELIMINACIÓN
                                                                if(clienteForaneo == null)
                                                                {
                                                                    try {
                                                                        EntityManagerFactory emf = Persistence.createEntityManagerFactory("PU");
                                                                        Ciudad ciud = new CiudadJpaController(emf).buscarPorNombre(comuna);
                                                                        Tipopropiedades tipro = new TipopropiedadesJpaController(emf).buscarPorNombre(tipoPropiedad);
                                                                        BigInteger bgi = new BigInteger(tipro.getId()+"");
                                                                        BigDecimal bgd = new ClienteJpaController(emf).ultimoCliente();
                                                                        Cliente cli = new Cliente(bgd, rut, dv, nombres, apaterno, amaterno, direccion, ciud, email, telefono, bgi, renta);
                                                                        new ClienteJpaController(emf).create(cli);


                                                                        txtRut.setText("");
                                                                        txtDv.setText("");
                                                                        txtNombres.setText("");
                                                                        txtAmaterno.setText("");
                                                                        txtApaterno.setText("");
                                                                        txtDireccion.setText("");
                                                                        txtEmail.setText("");
                                                                        txtTelefono.setText("");
                                                                        txtRenta.setText("");
                                                                        cmbComuna.removeAllItems();
                                                                        cmbComuna.addItem("Seleccione...");
                                                                        cmbPreferencia.removeAllItems();
                                                                        cmbPreferencia.addItem("Seleccione...");
                                                                        for(Ciudad c : new CiudadJpaController(emf).listar()) {
                                                                            cmbComuna.addItem(c.getNombre());
                                                                        }
                                                                        //rellenando lista de tipos de propiedad
                                                                        for(Tipopropiedades t : new TipopropiedadesJpaController(emf).listar()) {
                                                                            cmbPreferencia.addItem(t.getNombre());
                                                                        }
                                                                        emf.close();
                                                                    } catch (Exception e) {
                                                                        JOptionPane.showMessageDialog(null, e.getMessage(), "error", 3);
                                                                    }
                                                                }else{
                                                                    //eliminacion
                                                                    int respuesta = JOptionPane.showConfirmDialog(null, "¿Esta Seguro de eliminar a "+clienteForaneo.nombreCompleto()+" de los clientes de DreamHome?", "Eliminar Cliente",  2, 2);
                                                                    if(respuesta == 0) {
                                                                        EntityManagerFactory emf = Persistence.createEntityManagerFactory("PU");
                                                                        try {
                                                                            new ClienteJpaController(emf).destroy(clienteForaneo.getNumcliente());
                                                                            JOptionPane.showMessageDialog(null, "Cliente eliminado");
                                                                            this.dispose();
                                                                        } catch (Exception e) {
                                                                            JOptionPane.showMessageDialog(null, "Error cuando se trataba de eliminar al cliente. El servidor dijo: "+e.getMessage());
                                                                        }
                                                                    }
                                                                }
                                                            }catch(Exception e)
                                                            {
                                                                JOptionPane.showMessageDialog(null, "El valor de la renta solo puede contener numeros sin puntos: "+e.getMessage());
                                                                txtRenta.requestFocus();
                                                                txtRenta.setText("");
                                                            }
                                                        }catch(Exception e )
                                                        {
                                                            JOptionPane.showMessageDialog(null, "El telefono solo puede contener numeros");
                                                            txtTelefono.requestFocus();
                                                            txtTelefono.setText("");
                                                        }
                                                    }catch(Exception e)
                                                    {
                                                        JOptionPane.showMessageDialog(null, "El rut solo puede contener números");
                                                        txtRut.requestFocus();
                                                        txtRut.setText("");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnGuardarNuevoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgregarCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgregarCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgregarCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgregarCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgregarCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnGuardarNuevo;
    private javax.swing.JComboBox cmbComuna;
    private javax.swing.JComboBox cmbPreferencia;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel panelDomicilioCliente;
    private javax.swing.JPanel panelInfoAdicional;
    private javax.swing.JPanel panelInfoCliente;
    private javax.swing.JPanel panelInfoContacto;
    private javax.swing.JTextField txtAmaterno;
    private javax.swing.JTextField txtApaterno;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtDv;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNombres;
    private javax.swing.JTextField txtRenta;
    private javax.swing.JTextField txtRut;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables
}
